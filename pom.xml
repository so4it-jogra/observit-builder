<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>se.observit</groupId>
    <artifactId>observit-builder</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <build>
        <plugins>
        <!--
                http://george-stathis.com/2013/11/09/painless-maven-project-releases-with-maven-gitflow-plugin/


                mvn jgitflow:feature-start:
                    Creates a new feature branch; prompts for the branch name which will take the format feature/
                    <branch name>; pushes the branch to origin automatically so that we can do two things:
                    1) collaborate with others and
                    2) get Jenkins to build it

                mvn jgitflow:feature-finish:
                    Merges a feature branch back into the dvlp branch and pushes to origin

                mvn jgitflow:release-start:
                    Creates a release branch (e.g. release/rev-5.1) and pushes it to origin

                mvn jgitflow:release-finish:
                    Builds, tags and merges the release branch back into master and dvlp; updates versions in master and dvlp branches

                mvn jgitflow:hotfix-start:
                    Works like mvn jgitflow:release-start but branches off of master

                mvn jgitflow:hotfix-finish:
                    Works like mvn jgitflow:release-finish
                -->
        <plugin>
            <groupId>external.atlassian.jgitflow</groupId>
            <artifactId>jgitflow-maven-plugin</artifactId>
            <version>1.0-m5.1</version>
            <configuration>

                <!-- Enable this to push to origin using SSH keys -->
                <enableSshAgent>true</enableSshAgent>

                <!-- Keep your maven sub-modules at the same version as the parent POM -->
                <autoVersionSubmodules>true</autoVersionSubmodules>

                <!--
                  Pushing in-development features to origin allows all developers to see what each other
                  are working on
                -->
                <pushFeatures>true</pushFeatures>

                <!--
                  Allow or deny the use of snapshot dependencies when doing releases
                -->
                <allowSnapshots>true</allowSnapshots>

                <!--
                  This allows the CI server (e.g. Jenkins) to automatically push new releases to
                  origin; you can then either manually deploy them or, if you are doing Continuous
                  Deployments, auto-deploy them to production
                -->
                <pushReleases>true</pushReleases>

                <!--
                  Hot Fixes should be pushed to origin as well so that any dev can pick them up
                -->
                <pushHotfixes>true</pushHotfixes>

                <!--
                  Prevents deployments from developer workstations so that they can be done by a CI
                  server
                -->
                <noDeploy>true</noDeploy>

                <!--
                  Goal to use during finish phase, default is clean deploy which pushes to nexus
                  which is redundant as Jenkins will build and deploy at commit and push
                -->
                <goals>clean install</goals>

                <flowInitContext>
                    <masterBranchName>master</masterBranchName>
                    <developBranchName>develop</developBranchName>
                </flowInitContext>
            </configuration>
        </plugin>
        </plugins>
    </build>
</project>